apply plugin: 'com.android.application'

android {
    compileSdkVersion 34
    namespace 'us.spotco.malwarescanner'

    defaultConfig {
        applicationId "org.axpos.lovelaceav"
        resValue "string", "app_name", "LoveLaceAV"
        minSdkVersion 21
        targetSdkVersion 34
        if (System.properties.containsKey('versionCodeOverride')) {
            versionCode System.getProperty('versionCodeOverride') as Integer
        } else {
            versionCode 31610
        }
        versionName "3.16.10"
        if (System.properties.containsKey('versionNameSuffix')) {
            versionNameSuffix System.getProperty('versionNameSuffix')
        }
        resConfigs 'en', 'ar', 'bg', 'cs', 'de', 'es', 'et', 'fi', 'fr', 'gl', 'hr', 'in', 'it', 'iw', 'ja', 'pt', 'pt-rBR', 'ro', 'ru', 'sk', 'ta', 'tr', 'uk', 'zh-rCN', 'zh-rTW'
        // currently disabled locales due to insufficient translation: af, pl, el
    }
    buildTypes {
        debug {
            debuggable true

            // suffix the app id and the app name with git branch name
            def workingBranch = getGitWorkingBranch()
            def normalizedWorkingBranch = workingBranch.replaceFirst("^[^A-Za-z]+", "").replaceAll("[^0-9A-Za-z]+", "")
            if (normalizedWorkingBranch.isEmpty() || workingBranch == "master" || workingBranch == "dev" || workingBranch == "stable") {
                // default values when branch name could not be determined or is master, dev or stable
                applicationIdSuffix ".debug"
                resValue "string", "app_name", "LoveLaceAV Debug"
            } else {
                applicationIdSuffix ".debug." + normalizedWorkingBranch
                resValue "string", "app_name", "LoveLaceAV " + workingBranch
            }

            zipAlignEnabled true

        }
        release {
            if (System.properties.containsKey('packageSuffix')) {
                applicationIdSuffix System.getProperty('packageSuffix')
                resValue "string", "app_name", "LoveLaceAV " + System.getProperty('packageSuffix')
            }
            minifyEnabled true
            shrinkResources false // disabled to fix F-Droid's reproducible build
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lint {
        abortOnError false
    }
    packagingOptions {
        exclude 'org/bouncycastle/pqc/crypto/picnic/lowmcL1.bin.properties'
        exclude 'org/bouncycastle/pqc/crypto/picnic/lowmcL3.bin.properties'
        exclude 'org/bouncycastle/pqc/crypto/picnic/lowmcL5.bin.properties'
        exclude 'org/bouncycastle/x509/CertPathReviewerMessages.properties'
        exclude 'org/bouncycastle/x509/CertPathReviewerMessages_de.properties'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
        encoding 'utf-8'
    }
    buildFeatures {
        buildConfig = true
    }
    dependenciesInfo {

        // Disables dependency metadata when building APKs.
        includeInApk = false
        // Disables dependency metadata when building Android App Bundles.
        includeInBundle = false
    }
}

dependencies {
    implementation 'commons-io:commons-io:2.5'
    implementation 'org.bouncycastle:bcpg-jdk15to18:1.77'
    implementation 'com.google.guava:guava:33.0.0-jre'
    implementation 'androidx.appcompat:appcompat:1.6.1'
}

static String getGitWorkingBranch() {
    try {
        def gitProcess = "git rev-parse --abbrev-ref HEAD".execute()
        gitProcess.waitFor()
        if (gitProcess.exitValue() == 0) {
            return gitProcess.text.trim()
        } else {
            // not a git repository
            return ""
        }
    } catch (IOException ignored) {
        // git was not found
        return ""
    }
}
