/*
Hypatia: A realtime malware scanner for Android
Copyleft  (ðŸ„¯) 2025 MaintainTeam Organization

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

package us.spotco.malwarescanner;

import android.content.Context;

import android.os.Build;
import android.os.Handler;
import android.os.HandlerThread;
import android.os.Looper;

import android.text.method.ScrollingMovementMethod;
import android.widget.TextView;

import java.lang.ref.WeakReference;
import java.util.concurrent.ConcurrentLinkedQueue;
import android.util.Log;

import androidx.annotation.NonNull;

/**
 * Log Types
 */
enum LogType {
    VERYVERBOSE,
    VERBOSE,
    DEBUG,
    NONEWLINE,
    ONLYNEWLINE,
    DEFAULT,
    INFO,
    WARNING,
    ERROR;
}
// TODO add more DEBUG types??: DEBUG-ERROR, DEBUG-WARNING etc?

/**
 * Logs process outputs to user interface
 * TODO use a separate log page to list this logs, not MainActivity
 * 
 * @author Aliberk SandÄ±kÃ§Ä±
 *
 */
public class HypatiaLogger {

    private static HypatiaLogger instance;
    private final ConcurrentLinkedQueue<String> logQueue = new ConcurrentLinkedQueue<>();
    private WeakReference<TextView> logViewRef;
    private final Handler uiHandler = new Handler(Looper.getMainLooper());

    /**
     * Logs process outputs to user interface
     * prints out also verbose/debug if app is debug version
     *
     * @param content log content
     * @param type    log type
     */
    public static void Log(String content, LogType type) {
        Boolean userFacing = true;

        // toggle these to show/hide DEBUG/VERBOSE and VERYVERBOSE in debug app builds
        Boolean ENABLE_DEBUG = false;
        Boolean ACTIVATE_VERYVERBOSE = false;
        switch (type) {
            case VERYVERBOSE:
                if (ACTIVATE_VERYVERBOSE) {
                    android.util.Log.v("Hypatia Logger", content);
                }
                break;
            case VERBOSE:
                android.util.Log.v("Hypatia Logger", content);
                content = "VERBOSE: " + content;
                if (!BuildConfig.DEBUG || !ENABLE_DEBUG) {
                    userFacing = false;
                }
                break;
            case DEBUG:
                android.util.Log.d("Hypatia Logger", content);
                content = "DEBUG: " + content;
                if (!BuildConfig.DEBUG || !ENABLE_DEBUG) {
                    userFacing = false;
                }
                break;
            case INFO:
                android.util.Log.i("Hypatia Logger", content);
                content = "INFO: " + content;
                break;
            case WARNING:
                android.util.Log.w("Hypatia Logger", content);
                content = "WARNING: " + content;
                break;
            case ERROR:
                android.util.Log.e("Hypatia Logger", content);
                content = "ERROR: " + content;
                break;
            default:
                android.util.Log.d("Hypatia Logger", content);
                break;
        }
        try {
            if (userFacing && (type != LogType.VERYVERBOSE)) {
                HypatiaLogger.getInstance().logUtil(content + (type == LogType.NONEWLINE ? "" : "\n"));
            }
        } catch (Exception e) {
            Log.d("Hypatia LOGGER", "LOGGER DO NOT WORK FOR SOME REASON !!!");
            e.printStackTrace();
        }

    }

    /**
     * Overloader of actual {@code Log()} function
     * 
     * @see #Log(String, LogType)
     * @param content log content
     */
    public static void Log(String content) {
        Log(content, LogType.DEFAULT);
    }

    /*
     * //////////////////////////////////////////////////////////////////////////
     * Utilities to ensure Logger working correctly and getting logs from
     * multiple sources
     * //////////////////////////////////////////////////////////////////////////
     */

    private HypatiaLogger() {
    }

    public static HypatiaLogger getInstance() {
        if (instance == null) {
            synchronized (HypatiaLogger.class) {
                if (instance == null) {
                    instance = new HypatiaLogger();
                }
            }
        }
        return instance;
    }

    public void setLogView(TextView textView) {
        logViewRef = new WeakReference<>(textView);
        flushQueue();
    }

    private void checkMainActivity() {
        if (logViewRef == null || logViewRef.get() == null) {
            Hypatia.getInstance().ensureMainActivity();
        }
    }

    public void logUtil(String message) {
        logQueue.add(message);
        uiHandler.post(this::flushQueue);
        checkMainActivity();
    }

    private void flushQueue() {
        if (logViewRef != null && logViewRef.get() != null) {
            TextView tv = logViewRef.get();
            while (!logQueue.isEmpty()) {
                String log = logQueue.poll();
                tv.append(log);
            }
        }
    }

}