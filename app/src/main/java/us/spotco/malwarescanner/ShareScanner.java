/*
Hypatia: A realtime malware scanner for Android
Copyleft  (ðŸ„¯) 2025 MaintainTeam Organization

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/
package us.spotco.malwarescanner;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.net.Uri;
import android.os.Bundle;
import android.provider.DocumentsContract;
import android.provider.MediaStore;
import android.provider.OpenableColumns;
import android.util.Log;
import android.widget.TextView;

import androidx.appcompat.app.AppCompatActivity;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.FileOutputStream;
import java.util.HashSet;

public class ShareScanner extends AppCompatActivity {

    private MalwareScanner malwareScanner = null;
    private String shareScanType;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        handleIncomingIntent(getIntent());
    }

    private void handleIncomingIntent(Intent intent) {
        if (Intent.ACTION_SEND.equals(intent.getAction()) && intent.getType() != null) {
            Uri fileUri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
            String userResult;
            Intent mainIntent = new Intent(Hypatia.getAppContext(), MainActivity.class);
            mainIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);
            startActivity(mainIntent);

            if (fileUri != null) {
                userResult = scanFile(fileUri);
            } else if ("text/plain".equals(intent.getType())) {
                userResult = "This is not a scannable file - probably just a string: "
                        + intent.getStringExtra(Intent.EXTRA_TEXT);
                // TODO feat: Link Scanner?
                // TODO feat: get string input (hash) directly to scan
            } else {
                userResult = "THIS IS NOT A SCANNABLE THING";
            }

            mainIntent.putExtra("SHARE_SCAN_RESULT", userResult);
            mainIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);
            startActivity(mainIntent);
            finish();
        }
    }

    private String scanFile(Uri fileUri) {
        try {
            Context context = Hypatia.getAppContext();
            File file = getFileFromUri(context, fileUri);

            if (file == null || !file.exists()) {
                return "Error: File not accessible";
            }

            malwareScanner = new MalwareScanner(context, true);
            malwareScanner.running = true;
            HashSet<File> filesToScan = new HashSet<>();
            filesToScan.add(file);

            HypatiaLogger.Log("Scanning file at: " + file.getAbsolutePath(), LogType.DEBUG);
            malwareScanner.executeOnExecutor(Utils.getThreadPoolExecutor(), filesToScan);
            return "Scan started for: " + file.getName();

        } catch (RuntimeException e) {
            Log.e("LoveLaceAV", "Scan error: " + e.getMessage());
            return "Scanner Error: " + e.getMessage();
        }
    }

    private File getFileFromUri(Context context, Uri uri) {
        String filePath = getRealPathFromUri(context, uri);
        if (filePath != null) {
            MalwareScanner.isCache = false;
            return new File(filePath);
        } else {
            HypatiaLogger.Log("Unsupported URI, falling back to cache-system", LogType.DEBUG);
            MalwareScanner.isCache = true;
            return handleUnsupportedUri(context, uri);
        }
    }

    /**
     * Get real path from an uri. probably returns null for share on Android 10+
     * 
     * @see #handleUnsupportedUri()
     * 
     * @param context
     * @param uri uri
     * @return real path
     */
    private String getRealPathFromUri(Context context, Uri uri) {
        // File scheme
        if ("file".equals(uri.getScheme())) {
            return uri.getPath();
        }

        // Document provider
        if (DocumentsContract.isDocumentUri(context, uri)) {
            String docId = DocumentsContract.getDocumentId(uri);
            String[] split = docId.split(":");
            String type = split[0];

            Uri contentUri = null;
            switch (type) {
                case "image":
                    contentUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;
                    break;
                case "video":
                    contentUri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;
                    break;
                case "audio":
                    contentUri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;
                    break;
                case "download":
                    return getDataColumn(context, uri, null, null);
            }

            if (contentUri != null) {
                String selection = "_id=?";
                String[] selectionArgs = new String[] { split[1] };
                return getDataColumn(context, contentUri, selection, selectionArgs);
            }
        }
        // MediaStore (and general)
        else if ("content".equalsIgnoreCase(uri.getScheme())) {
            return getDataColumn(context, uri, null, null);
        }

        return null;
    }

    private String getDataColumn(Context context, Uri uri, String selection, String[] selectionArgs) {
        Cursor cursor = null;
        String column = MediaStore.MediaColumns.DATA;
        String[] projection = { column };

        try {
            cursor = context.getContentResolver().query(uri, projection, selection, selectionArgs, null);
            if (cursor != null && cursor.moveToFirst()) {
                int columnIndex = cursor.getColumnIndexOrThrow(column);
                return cursor.getString(columnIndex);
            }
        } catch (Exception e) {
            Log.e("LoveLaceAV", "Data column error", e);
        } finally {
            if (cursor != null)
                cursor.close();
        }
        return null;
    }

    /**
     * fallback for unsupported uris. reads share as InputStream and write copies to
     * cache
     * 
     * @param context
     * @param uri
     * @return hopefully a file
     */
    private File handleUnsupportedUri(Context context, Uri uri) {
        try {
            InputStream input = context.getContentResolver().openInputStream(uri);
            File file = createTempFile(context, getFileName(context, uri));
            FileOutputStream output = new FileOutputStream(file);

            byte[] buffer = new byte[4 * 1024];
            int read;
            while ((read = input.read(buffer)) != -1) {
                output.write(buffer, 0, read);
            }
            output.flush();
            return file;

        } catch (Exception e) {
            Log.e("Hypatia", "File copy error: " + e.getMessage());
            return null;
        }
    }

    private String getFileName(Context context, Uri uri) {
        String result = null;
        if (uri.getScheme().equals("content")) {
            try (Cursor cursor = context.getContentResolver().query(uri, null, null, null, null)) {
                if (cursor != null && cursor.moveToFirst()) {
                    result = cursor.getString(cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME));
                }
            }
        }
        if (result == null) {
            result = uri.getPath();
            int cut = result.lastIndexOf('/');
            if (cut != -1) {
                result = result.substring(cut + 1);
            }
        }
        return result;
    }

    private File createTempFile(Context context, String fileName) {
        File storageDir = context.getExternalCacheDir();
        if (storageDir == null) {
            storageDir = context.getCacheDir();
        }
        return new File(storageDir, fileName);
    }
}
